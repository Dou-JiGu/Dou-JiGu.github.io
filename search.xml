<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo食用教程</title>
      <link href="/posts/95ae.html"/>
      <url>/posts/95ae.html</url>
      
        <content type="html"><![CDATA[<p>。使下载速度更快些<br>—切换淘宝镜像：npm config set registry <a href="https://registry.npm.taobao.org（切回源：npm">https://registry.npm.taobao.org（切回源：npm</a> config set registry <a href="https://registry.npmjs.org/）">https://registry.npmjs.org/）</a></p><p>。全局安装hexo脚手架工具<br>—npm install hexo-cli -g</p><p>。初始化hexo<br>—hexo init</p><p>。下载git连接远程仓库<br>— npm install hexo-deployer-git —save</p><p>。<br>—hexo generate</p><p>。<br>—hexo server  </p><p>。<br>—npm install hexo-renderer-pug hexo-renderer-stylus —save</p><p>。从github仓库下载目标：butterfly主题<br>— git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/butterfly</p><p>。<br>—hexo三件套：hexo cl（清除缓存）、hexo g（提交到本地）、hexo s（运行hexo跑起来）</p><p>。配置文章链接转数字或字母：<a href="https://github.com/rozbo/hexo-abbrlink">https://github.com/rozbo/hexo-abbrlink</a><br>—npm install hexo-abbrlink —save</p><p>。进入根目录中配置_config.yml，替换permalink<br>—permalink: posts/:abbrlink.html</p><p>。进入根目录中配置_config.yml，修改语言language<br>—language: zh-CN</p><p>一、配置插件<br>1、配置文章链接转数字或字母<br>。复制github文档配置文章链接转数字或字母所需的配置到根目录中配置_config.yml中最底下<br>—# abbrlink config<br>abbrlink:<br>  alg: crc32      #support crc16(default) and crc32<br>  rep: hex        #support dec(default) and hex</p><p>2、本地搜索<br>。到根目录中配置_config.yml中最底下添加<br>—search:<br>  path: search.xml<br>  field: all<br>  content: true</p><p>。在根目录创建_config.butterfly.yml文件，复制themes/butterfly/_config.yml内容到根目录_config.butterfly.yml中</p><p>。在_config.butterfly.yml中搜索local_search替换<br>—# Local search<br>local_search:<br>  enable: true<br>  preload: false<br>  CDN:</p><p>二、个性化个人主页资料<br>在根目录_config.yml中<br>。例如我的：<br>—# Site<br>title: 兜 叽 咕 の 小 小 世 界 # 封面显示标题<br>subtitle: ‘兜叽咕の博客’<br>description: ‘老骥伏枥，志在千里。’ # 描述站点<br>keywords: ‘兜叽咕,IT,分享,日常,浪漫de唯物主义’ # 关键词，搜索时可检索到你的博客（可写150字左右）<br>author: 兜叽咕 # 作者<br>language: zh-CN<br>timezone: ‘’</p><p>。因为我们修改的是配置文件需要重新运行，修改文章之类就不用重启（终止进程，hexo三件套重跑一遍）</p><p>三、将博客部署到网站上<br>。注册登录github<br>。创建仓库（严格命名：你的用户名.github.io）<br>。配置ssh（因为我自己配置过，所以大家可以去看大佬的教程）</p><h2 id="。配置完ssh，就可以得到ssh地址，将ssh地址复制到根目录中配置-config-yml中deploy（替换）"><a href="#。配置完ssh，就可以得到ssh地址，将ssh地址复制到根目录中配置-config-yml中deploy（替换）" class="headerlink" title="。配置完ssh，就可以得到ssh地址，将ssh地址复制到根目录中配置_config.yml中deploy（替换）"></a>。配置完ssh，就可以得到ssh地址，将ssh地址复制到根目录中配置_config.yml中deploy（替换）</h2><p>deploy:</p><ul><li>type: git<br>repository: git@github.com:Dou-JiGu/Dou-JiGu.github.io.git # ssh地址<br>branch: main # 分支</li></ul><p>。hexo三件套（最后一步换为hexo d提交，也可以使用联合命令），然后就可以登录github到你的：你的用户名.github.io 仓库 查看你上传的文件</p><p>。之后复制仓库名：你的用户名.github.io 仓库 即可通过网页访问你的博客了~</p><p>四、继续配置</p><h2 id="。到根目录中配置-config-yml中deploy中新加的百度主动推送（格式一定要对齐！）"><a href="#。到根目录中配置-config-yml中deploy中新加的百度主动推送（格式一定要对齐！）" class="headerlink" title="。到根目录中配置_config.yml中deploy中新加的百度主动推送（格式一定要对齐！）"></a>。到根目录中配置_config.yml中deploy中新加的百度主动推送（格式一定要对齐！）</h2><p>deploy:</p><ul><li>type: git<br>repository: git@github.com:Dou-JiGu/Dou-JiGu.github.io.git # ssh地址<br>branch: main # 分支</li><li>type: baidu_url_submitter # 这是新加的百度主动推送</li></ul><p>。到根目录中配置_config.yml中最后添加配置代码，并替换theme<br>—theme: butterfly<br>—# Live2D</p><h2 id="https-github-com-EYHN-hexo-helper-live2d"><a href="#https-github-com-EYHN-hexo-helper-live2d" class="headerlink" title="https://github.com/EYHN/hexo-helper-live2d"></a><a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></h2><p>live2d:<br>  enable: true #开关插件版看板娘<br>  scriptFrom: local # 默认</p><h1 id="scriptFrom-https-cdn-cbd-int-live2d-widget-3-x-lib-L2Dwidget-min-js-你的自定义-url"><a href="#scriptFrom-https-cdn-cbd-int-live2d-widget-3-x-lib-L2Dwidget-min-js-你的自定义-url" class="headerlink" title="scriptFrom: https://cdn.cbd.int/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url"></a>scriptFrom: <a href="https://cdn.cbd.int/live2d-widget@3.x/lib/L2Dwidget.min.js">https://cdn.cbd.int/live2d-widget@3.x/lib/L2Dwidget.min.js</a> # 你的自定义 url</h1><p>  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中<br>  debug: false # 调试, 是否在控制台输出日志<br>  model:<br>    use: live2d-widget-model-koharu # 可替换模型 # npm-module package name</p><pre><code># use: https://unpkg.com/live2d-widget-model-koharu@1.0.5/assets/koharu.model.json # 你的自定义 url</code></pre><p>  display:<br>    position: left #控制看板娘位置<br>    width: 150 #控制看板娘大小<br>    height: 300 #控制看板娘大小<br>  mobile:<br>    show: false # 手机中是否展示</p><h1 id="https-github-com-hexojs-hexo-generator-sitemap"><a href="#https-github-com-hexojs-hexo-generator-sitemap" class="headerlink" title="https://github.com/hexojs/hexo-generator-sitemap"></a><a href="https://github.com/hexojs/hexo-generator-sitemap">https://github.com/hexojs/hexo-generator-sitemap</a></h1><p>sitemap:<br>  path: sitemap.xml<br>  rel: false<br>  tags: true<br>  categories: true</p><h1 id="https-github-com-coneycode-hexo-generator-baidu-sitemap"><a href="#https-github-com-coneycode-hexo-generator-baidu-sitemap" class="headerlink" title="https://github.com/coneycode/hexo-generator-baidu-sitemap"></a><a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">https://github.com/coneycode/hexo-generator-baidu-sitemap</a></h1><p>baidusitemap:<br>    path: baidusitemap.xml</p><h1 id="https-github-com-hexojs-hexo-generator-feed"><a href="#https-github-com-hexojs-hexo-generator-feed" class="headerlink" title="https://github.com/hexojs/hexo-generator-feed"></a><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></h1><h1 id="Feed-Atom"><a href="#Feed-Atom" class="headerlink" title="Feed Atom"></a>Feed Atom</h1><p>feed:<br>    type: atom<br>    path: atom.xml<br>    limit: 20<br>rss: /atom.xml</p><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><p>plugins:</p><pre><code>- hexo-generator-feed- hexo-generator-baidu-sitemap- hexo-generator-sitemap</code></pre><p>。在 hexo generate 或 hexo deploy 之前使用追番插件，否则不会显示，hexo bangumi -u 命令更新番剧数据！删除数据命令: hexo bangumi -d</p><h1 id="追番插件"><a href="#追番插件" class="headerlink" title="追番插件"></a>追番插件</h1><h1 id="https-github-com-HCLonely-hexo-bilibili-bangumi"><a href="#https-github-com-HCLonely-hexo-bilibili-bangumi" class="headerlink" title="https://github.com/HCLonely/hexo-bilibili-bangumi"></a><a href="https://github.com/HCLonely/hexo-bilibili-bangumi">https://github.com/HCLonely/hexo-bilibili-bangumi</a></h1><p>bangumi: # 追番设置<br>  enable: true<br>  path:<br>  vmid: 275606116 # 替换为自己的b站的用户id<br>  title: ‘追番列表’<br>  quote: ‘生命不息，追番不止！’<br>  show: 1<br>  lazyload: false<br>  loading:<br>  metaColor:<br>  color:<br>  webp:<br>  progress:<br>  extra_options:<br>    key: value<br>cinema: # 追剧设置<br>  enable: false<br>  path:<br>  vmid: 275606116 # 替换为自己的b站的用户id<br>  title: ‘追剧列表’<br>  quote: ‘生命不息，追剧不止！’<br>  show: 1<br>  lazyload: true<br>  loading:<br>  metaColor:<br>  color:<br>  webp:<br>  progress:<br>  extra_options:<br>    key: value</p><h1 id="百度主动推送"><a href="#百度主动推送" class="headerlink" title="百度主动推送"></a>百度主动推送</h1><h1 id="https-github-com-huiwang-hexo-baidu-url-submit"><a href="#https-github-com-huiwang-hexo-baidu-url-submit" class="headerlink" title="https://github.com/huiwang/hexo-baidu-url-submit"></a><a href="https://github.com/huiwang/hexo-baidu-url-submit">https://github.com/huiwang/hexo-baidu-url-submit</a></h1><p>baidu_url_submit:<br>  count: 1        # 提交最新的多少个链接<br>  host: www.wowowo.top  # 在百度站长平台中添加的域名<br>  token: SzqY2ifHCYLLf4jH   # 秘钥<br>  path: baidu_urls.txt   # 文本文档的地址， 新链接会保存在此文本文档里</p><h1 id="APlayer"><a href="#APlayer" class="headerlink" title="APlayer"></a>APlayer</h1><h1 id="https-github-com-MoePlayer-hexo-tag-aplayer-blob-master-docs-README-zh-cn-md"><a href="#https-github-com-MoePlayer-hexo-tag-aplayer-blob-master-docs-README-zh-cn-md" class="headerlink" title="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md"></a><a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</a></h1><p>aplayer:<br>  meting: true<br>  asset_inject: false</p><p>。一一装上插件<br>—# 安装live2d<br>npm install —save hexo-helper-live2d<br>—# 安装模型<br>npm install —save live2d-widget-model-koharu # 可替换模型<br>—# 安装 sitemap ，方便爬虫爬我们的网站<br>npm install hexo-generator-sitemap —save<br>npm install hexo-generator-baidu-sitemap —save-dev</p><p>—# 装 Rss ，也类似方便爬虫爬我们的网站<br>npm install hexo-generator-feed —save</p><p>—# 追番插件（我先注释掉了~）<br>npm install hexo-bilibili-bangumi —save<br>（配置一下，vmid 需要自己去拿！）</p><p>—# 百度主动推送<br>记得修改一下百度主动推送，参照：</p><h1 id="https-github-com-huiwang-hexo-baidu-url-submit-1"><a href="#https-github-com-huiwang-hexo-baidu-url-submit-1" class="headerlink" title="https://github.com/huiwang/hexo-baidu-url-submit"></a><a href="https://github.com/huiwang/hexo-baidu-url-submit">https://github.com/huiwang/hexo-baidu-url-submit</a></h1><p>baidu_url_submit:<br>  count: 1        # 提交最新的多少个链接<br>  host: wowowo.top  # 在百度站长平台中添加的域名，改成自己的站点<br>  token: 自己的秘钥   # 秘钥<br>  path: baidu_urls.txt   # 文本文档的地址， 新链接会保存在此文本文档里<br>（具体看大佬的教程）</p><p>。将主题配置中的懒加载lazyload:enable打开，把根目录配置里的懒加载关闭（避免冲突）</p><p>。到主题配置_config.butterfly.yml里，查找aplayerInject，全部改为true，防止重复加载<br>—aplayerInject: # 防止重复加载<br>  enable: true<br>  per_page: true</p><p>。将音乐代码放到主题配置_config.butterfly.yml里的Inject中选择位置head/bottom，将语法复制进去（这里我也先注释了~）<br>—# aplayer音乐</p><ul><li><div class="aplayer no-destroy" data-id="1708664797" data-server="tencent" data-type="playlist"   data-order="list" data-fixed="true" data-preload="auto" data-autoplay="false" data-mutex="true" ></div><br>（记得改 data-id 以及 data-server，具体看大佬教程，可以去github搜aplayer音乐看如何配置）</li></ul><p>五、装配pwa<br>用处：<br>1、右上角可以有安装按钮，可以离线看博客<br>2、可以有缓存，加快我们的访问速度<br>3、博客更新后，右上角会有通知<br>。安装必要插件<br>—npm install —global gulp-cli # 全局安装gulp命令集<br>npm install workbox-build gulp —save # 安装workbox和gulp插件</p><h1 id="压缩html插件"><a href="#压缩html插件" class="headerlink" title="压缩html插件"></a>压缩html插件</h1><p>npm install gulp-htmlclean —save-dev<br>npm install —save gulp-htmlmin</p><h1 id="压缩css插件"><a href="#压缩css插件" class="headerlink" title="压缩css插件"></a>压缩css插件</h1><p>npm install gulp-clean-css —save-dev</p><h1 id="压缩js插件"><a href="#压缩js插件" class="headerlink" title="压缩js插件"></a>压缩js插件</h1><h1 id="使用babel压缩js，与terser二选一"><a href="#使用babel压缩js，与terser二选一" class="headerlink" title="使用babel压缩js，与terser二选一"></a>使用babel压缩js，与terser二选一</h1><p>npm install —save-dev gulp-uglify<br>npm install —save-dev gulp-babel @babel/core @babel/preset-env</p><h1 id="使用terser压缩js，与babel二选一（建议terser压缩js，babel容易混淆代码语义）"><a href="#使用terser压缩js，与babel二选一（建议terser压缩js，babel容易混淆代码语义）" class="headerlink" title="使用terser压缩js，与babel二选一（建议terser压缩js，babel容易混淆代码语义）"></a>使用terser压缩js，与babel二选一（建议terser压缩js，babel容易混淆代码语义）</h1><p>npm install gulp-terser —save-dev<br>npm install —save-dev gulp-babel @babel/core @babel/preset-env</p><h1 id="压缩图片插件（图片压缩，一定是node12-x才有用，node16-x就没有用了）"><a href="#压缩图片插件（图片压缩，一定是node12-x才有用，node16-x就没有用了）" class="headerlink" title="压缩图片插件（图片压缩，一定是node12.x才有用，node16.x就没有用了）"></a>压缩图片插件（图片压缩，一定是node12.x才有用，node16.x就没有用了）</h1><p>npm install —save-dev gulp-imagemin</p><h1 id="压缩字体插件-font-min仅支持压缩ttf格式的字体包"><a href="#压缩字体插件-font-min仅支持压缩ttf格式的字体包" class="headerlink" title="压缩字体插件(font-min仅支持压缩ttf格式的字体包)"></a>压缩字体插件(font-min仅支持压缩ttf格式的字体包)</h1><p>npm install gulp-fontmin —save-dev</p><p>。在根目录的 package.json 中添加<br>—“type”: “module”,</p><h2 id="。在根目录新建文件gulpfile-js，复制以下内容到gulpfile-js中（主要用处：用来压缩）"><a href="#。在根目录新建文件gulpfile-js，复制以下内容到gulpfile-js中（主要用处：用来压缩）" class="headerlink" title="。在根目录新建文件gulpfile.js，复制以下内容到gulpfile.js中（主要用处：用来压缩）"></a>。在根目录新建文件gulpfile.js，复制以下内容到gulpfile.js中（主要用处：用来压缩）</h2><p>import gulp from ‘gulp’;<br>import cleanCSS from ‘gulp-clean-css’;<br>import htmlmin from ‘gulp-htmlmin’;<br>import htmlclean from ‘gulp-htmlclean’;<br>import workbox from ‘workbox-build’;<br>import fontmin from ‘gulp-fontmin’;</p><p>// 若使用babel压缩js，则取消下方注释，并注释terser的代码<br>// var uglify = require(‘gulp-uglify’);<br>// var babel = require(‘gulp-babel’);</p><p>// 若使用terser压缩js<br>import terser from ‘gulp-terser’;</p><p>//pwa<br>gulp.task(‘generate-service-worker’, () =&gt; {<br>  return workbox.injectManifest({<br>    swSrc: ‘./sw-template.js’,<br>    swDest: ‘./public/sw.js’,<br>    globDirectory: ‘./public’,<br>    globPatterns: [<br>      // 缓存所有以下类型的文件，极端不推荐<br>      // “<em>*/</em>.{html,css,js,json,woff2,xml}”<br>      // 推荐只缓存404，主页和主要样式和脚本。<br>      ‘404.html’,<br>      ‘index.html’,<br>      ‘js/main.js’,<br>      ‘css/index.css’,<br>    ],<br>    modifyURLPrefix: {<br>      ‘’: ‘./‘,<br>    },<br>  });<br>});</p><p>//minify js babel<br>// 若使用babel压缩js，则取消下方注释，并注释terser的代码<br>// gulp.task(‘compress’, () =&gt;<br>//   gulp.src([‘./public/<strong>/*.js’, ‘!./public/</strong>/*.min.js’])<br>//         .pipe(babel({<br>//             presets: [‘@babel/preset-env’]<br>//         }))<br>//     .pipe(uglify().on(‘error’, function(e){<br>//       console.log(e);<br>//     }))<br>//         .pipe(gulp.dest(‘./public’))<br>// );</p><p>// minify js - gulp-tester<br>// 若使用terser压缩js<br>gulp.task(‘compress’, () =&gt;<br>  gulp<br>    .src([<br>      ‘./public/<strong>/*.js’,<br>      ‘!./public/</strong>/*.min.js’,<br>      ‘!./public/js/custom/galmenu.js’,<br>      ‘!./public/js/custom/gitcalendar.js’,<br>    ])<br>    .pipe(terser())<br>    .pipe(gulp.dest(‘./public’))<br>);</p><p>//css<br>gulp.task(‘minify-css’, () =&gt; {<br>  return gulp<br>    .src(‘./public/<em>*/</em>.css’)<br>    .pipe(<br>      cleanCSS({<br>        compatibility: ‘ie11’,<br>      })<br>    )<br>    .pipe(gulp.dest(‘./public’));<br>});</p><p>// 压缩 public 目录内 html<br>gulp.task(‘minify-html’, () =&gt; {<br>  return gulp<br>    .src(‘./public/<em>*/</em>.html’)<br>    .pipe(htmlclean())<br>    .pipe(<br>      htmlmin({<br>        removeComments: true, //清除 HTML 註释<br>        collapseWhitespace: true, //压缩 HTML<br>        collapseBooleanAttributes: true, //省略布尔属性的值 <input checked="true"/> ==&gt; <input /><br>        removeEmptyAttributes: true, //删除所有空格作属性值 <input id="" /> ==&gt; <input /><br>        removeScriptTypeAttributes: true, //删除 <script> 的 type=”text/javascript”<br>        removeStyleLinkTypeAttributes: true, //删除 <style> 和 <link> 的 type=”text/css”<br>        minifyJS: true, //压缩页面 JS<br>        minifyCSS: true, //压缩页面 CSS<br>        minifyURLs: true,<br>      })<br>    )<br>    .pipe(gulp.dest(‘./public’));<br>});</p><p>//压缩字体<br>function minifyFont(text, cb) {<br>  gulp<br>    .src(‘./public/fonts/*.ttf’) //原字体所在目录<br>    .pipe(<br>      fontmin({<br>        text: text,<br>      })<br>    )<br>    .pipe(gulp.dest(‘./public/fontsdest/‘)) //压缩后的输出目录<br>    .on(‘end’, cb);<br>}</p><p>gulp.task(‘mini-font’, cb =&gt; {<br>  var buffers = [];<br>  gulp<br>    .src([‘./public/<em>*/</em>.html’]) //HTML文件所在目录请根据自身情况修改<br>    .on(‘data’, function (file) {<br>      buffers.push(file.contents);<br>    })<br>    .on(‘end’, function () {<br>      var text = Buffer.concat(buffers).toString(‘utf-8’);<br>      minifyFont(text, cb);<br>    });<br>});</p><p>// 执行 gulp 命令时执行的任务<br>gulp.task(<br>  ‘default’,<br>  gulp.series(<br>    ‘generate-service-worker’,<br>    gulp.parallel(‘compress’, ‘minify-html’, ‘minify-css’, ‘mini-font’)<br>  )<br>);</p><p>。在根目录新建文件sw-template.js文件，复制以下内容到sw-template.js中<br>—const workboxVersion = ‘5.1.3’;</p><p>importScripts(<code>https://storage.googleapis.com/workbox-cdn/releases/$&#123;workboxVersion&#125;/workbox-sw.js</code>);</p><p>workbox.core.setCacheNameDetails({<br>  prefix: ‘兜叽咕’, // 缓存名称<br>});</p><p>workbox.core.skipWaiting();</p><p>workbox.core.clientsClaim();</p><p>// 注册成功后要立即缓存的资源列表<br>// 具体缓存列表在gulpfile.js中配置，见下文<br>workbox.precaching.precacheAndRoute(self.__WB_MANIFEST, {<br>  directoryIndex: null,<br>});</p><p>// 清空过期缓存<br>workbox.precaching.cleanupOutdatedCaches();</p><p>// 图片资源（可选，不需要就注释掉）<br>// workbox.routing.registerRoute(<br>//   /.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/,<br>//   new workbox.strategies.CacheFirst({<br>//     cacheName: ‘images’,<br>//     plugins: [<br>//       new workbox.expiration.ExpirationPlugin({<br>//         maxEntries: 1000,<br>//         maxAgeSeconds: 60 <em> 60 </em> 24 * 30,<br>//       }),<br>//       new workbox.cacheableResponse.CacheableResponsePlugin({<br>//         statuses: [0, 200],<br>//       }),<br>//     ],<br>//   })<br>// )</p><p>// 字体文件（可选，不需要就注释掉）<br>workbox.routing.registerRoute(<br>  /.(?:eot|ttf|woff|woff2)$/,<br>  new workbox.strategies.CacheFirst({<br>    cacheName: ‘fonts’,<br>    plugins: [<br>      new workbox.expiration.ExpirationPlugin({<br>        maxEntries: 1000,<br>        maxAgeSeconds: 60 <em> 60 </em> 24 * 30,<br>      }),<br>      new workbox.cacheableResponse.CacheableResponsePlugin({<br>        statuses: [0, 200],<br>      }),<br>    ],<br>  })<br>);</p><p>// 谷歌字体（可选，不需要就注释掉）<br>workbox.routing.registerRoute(<br>  /^https:\/\/fonts.googleapis.com/,<br>  new workbox.strategies.StaleWhileRevalidate({<br>    cacheName: ‘google-fonts-stylesheets’,<br>  })<br>);<br>workbox.routing.registerRoute(<br>  /^https:\/\/fonts.gstatic.com/,<br>  new workbox.strategies.CacheFirst({<br>    cacheName: ‘google-fonts-webfonts’,<br>    plugins: [<br>      new workbox.expiration.ExpirationPlugin({<br>        maxEntries: 1000,<br>        maxAgeSeconds: 60 <em> 60 </em> 24 * 30,<br>      }),<br>      new workbox.cacheableResponse.CacheableResponsePlugin({<br>        statuses: [0, 200],<br>      }),<br>    ],<br>  })<br>);</p><p>// jsdelivr的CDN资源（可选，不需要就注释掉）<br>// workbox.routing.registerRoute(<br>//   /^https:\/\/cdn.jsdelivr.net/,<br>//   new workbox.strategies.CacheFirst({<br>//     cacheName: ‘static-libs’,<br>//     plugins: [<br>//       new workbox.expiration.ExpirationPlugin({<br>//         maxEntries: 1000,<br>//         maxAgeSeconds: 60 <em> 60 </em> 24 * 30,<br>//       }),<br>//       new workbox.cacheableResponse.CacheableResponsePlugin({<br>//         statuses: [0, 200],<br>//       }),<br>//     ],<br>//   })<br>// )</p><p>workbox.googleAnalytics.initialize();</p><p>。在[Blogroot]\themes\butterfly\layout\includes\third-party\目录下新建pwanotice.pug文件，（通知博客文章更新了）<br>打开[Blogroot]\themes\butterfly\layout\includes\third-party\pwanotice.pug,输入：<br>—#app-refresh.app-refresh(style=’position: fixed;top: -2.2rem;left: 0;right: 0;z-index: 99999;padding: 0 1rem;font-size: 15px;height: 2.2rem;transition: all 0.3s ease;’)<br>  .app-refresh-wrap(style=’ display: flex;color: #fff;height: 100%;align-items: center;justify-content: center;’)<br>    label ✨ 有新文章啦！ 👉<br>    a(href=’javascript:void(0)’ onclick=’location.reload()’)<br>      span(style=’color: #fff;text-decoration: underline;cursor: pointer;’) 🍗点击食用🍔<br>script.<br>  if (‘serviceWorker’ in navigator) {<br>  if (navigator.serviceWorker.controller) {<br>  navigator.serviceWorker.addEventListener(‘controllerchange’, function() {<br>  showNotification()<br>  })<br>  }<br>  window.addEventListener(‘load’, function() {<br>  navigator.serviceWorker.register(‘/sw.js’)<br>  })<br>  }<br>  function showNotification() {<br>  if (GLOBAL_CONFIG.Snackbar) {<br>  var snackbarBg =<br>  document.documentElement.getAttribute(‘data-theme’) === ‘light’ ?<br>  GLOBAL_CONFIG.Snackbar.bgLight :<br>  GLOBAL_CONFIG.Snackbar.bgDark<br>  var snackbarPos = GLOBAL_CONFIG.Snackbar.position<br>  Snackbar.show({<br>  text: ‘✨ 有新文章啦！ 👉’,<br>  backgroundColor: snackbarBg,<br>  duration: 500000,<br>  pos: snackbarPos,<br>  actionText: ‘🍗点击食用🍔’,<br>  actionTextColor: ‘#fff’,<br>  onActionClick: function(e) {<br>  location.reload()<br>  },<br>  })<br>  } else {<br>  var showBg =<br>  document.documentElement.getAttribute(‘data-theme’) === ‘light’ ?<br>  ‘#5CA1FF’ :<br>  ‘#1f1f1f’<br>  var cssText = <code>top: 0; background: $&#123;showBg&#125;;</code><br>  document.getElementById(‘app-refresh’).style.cssText = cssText<br>  }<br>  }</p><p>。修改[Blogroot]\themes\butterfly\layout\includes\additional-js.pug,在文件底部添加以下内容，注意缩进。butterfly_v3.6.0取消了缓存配置，转为完全默认，需要将{cache:theme.fragment_cache}改为{cache: true}:（pug是严格缩进模式！）<br>—if theme.pwa.enable<br>    !=partial(‘includes/third-party/pwanotice’, {}, {cache: true})</p><p>。将你的图标包移入相应的目录，例如我是/img/siteicon/，所以放到[Blogroot]/source/img/siteicon/目录下。<br>新建文件名为manifest.json并将其放到[Blogroot]/source目录下，此时还不能直接用，需要添加一些内容，以下是我的manifest.json配置内容，权且作为参考，其中的theme_color建议用取色器取设计的图标的主色调，同时务必配置 start_url 和 name 的配置项，这关系到你之后能否看到浏览器的应用安装按钮。：（<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a>      阿里巴巴矢量图标库，可以设置站点图标）<br>—{<br>    “name”: “欢迎来到 兜 叽 咕 の 小 小 世 界”,<br>    “short_name”: “兜叽咕”,<br>    “theme_color”: “#5CA1FF”,<br>    “background_color”: “#5CA1FF”,<br>    “display”: “standalone”,<br>    “scope”: “/“,<br>    “start_url”: “/“,<br>    “icons”: [{<br>        “src”: “/img/siteicon/16.png”,<br>        “sizes”: “16x16”,<br>        “type”: “image/png”<br>      },<br>      {<br>        “src”: “/img/siteicon/32.png”,<br>        “sizes”: “32x32”,<br>        “type”: “image/png”<br>      },<br>      {<br>        “src”: “/img/siteicon/48.png”,<br>        “sizes”: “48x48”,<br>        “type”: “image/png”<br>      },<br>      {<br>        “src”: “/img/siteicon/64.png”,<br>        “sizes”: “64x64”,<br>        “type”: “image/png”<br>      },<br>      {<br>        “src”: “/img/siteicon/128.png”,<br>        “sizes”: “128x128”,<br>        “type”: “image/png”<br>      },<br>      {<br>        “src”: “/img/siteicon/144.png”,<br>        “sizes”: “144x144”,<br>        “type”: “image/png”<br>      },<br>      {<br>        “src”: “/img/siteicon/512.png”,<br>        “sizes”: “512x512”,<br>        “type”: “image/png”<br>      }<br>    ],<br>    “splash_pages”: null<br>  }</p><p>。打开主题配置文件[Blogroot]/_config.butterfly.yml,找到PWA配置项。添加图标路径。这里的 theme_color 建议改成你图标的主色调，包括manifest.json中的theme_color也是如此。<br>—pwa:<br>  enable: true<br>  manifest: /manifest.json<br>  theme_color: ‘#5CA1FF’<br>  apple_touch_icon: /img/siteicon/128.png<br>  favicon_32_32: /img/siteicon/32.png<br>  favicon_16_16: /img/siteicon/16.png<br>  mask_icon: /img/siteicon/128.png</p><p>。终端输入gulp进行压缩<br>。hexo三件套（本地看不到pwa，运行hexo g之后必须运行gulp指令，不然PWA不会生效！ <a href="https://akilar.top/posts/8f31c3d0/）">https://akilar.top/posts/8f31c3d0/）</a><br>—hexo d  直接部署</p><p>六、配置自定义css（一图流）</p><h2 id="。"><a href="#。" class="headerlink" title="。"></a>。</h2><p>七、标签外挂</p><h2 id="。-1"><a href="#。-1" class="headerlink" title="。"></a>。</h2><p>八、hexo完成github action自动部署</p><h2 id="。-2"><a href="#。-2" class="headerlink" title="。"></a>。</h2><p>X、图床</p><h2 id="。-3"><a href="#。-3" class="headerlink" title="。"></a>。</h2><p>X、自定义域名</p><h2 id="。-4"><a href="#。-4" class="headerlink" title="。"></a>。</h2><p>hexo -version    查看hexo版本<br>npm install hexo@4.1.1 —save    安装指定版本</p><p>source这个文件会在hexo g打包时打包到public中</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
